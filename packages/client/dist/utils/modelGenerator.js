"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/modelGenerator.ts
var modelGenerator_exports = {};
__export(modelGenerator_exports, {
  ModelGenerator: () => ModelGenerator
});
module.exports = __toCommonJS(modelGenerator_exports);
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var ModelGenerator = class {
  static {
    __name(this, "ModelGenerator");
  }
  outputPath;
  models;
  typeMapping = {
    string: "string",
    number: "number",
    boolean: "boolean",
    date: "Date"
  };
  constructor(outputPath) {
    this.outputPath = outputPath;
    this.models = /* @__PURE__ */ new Map();
    this.ensureDirectoryExists();
  }
  ensureDirectoryExists() {
    const dir = import_path.default.dirname(this.outputPath);
    if (!import_fs.default.existsSync(dir)) {
      import_fs.default.mkdirSync(dir, {
        recursive: true
      });
    }
  }
  addModel(definition) {
    this.models.set(definition.name, definition);
  }
  generateTypeForModel(definition) {
    const fields = Object.entries(definition.fields).map(([fieldName, fieldConfig]) => {
      const type = this.typeMapping[fieldConfig.type];
      const isRequired = fieldConfig.required !== false;
      return `  ${fieldName}${isRequired ? "" : "?"}: ${type};`;
    });
    const defaultFields = [
      "  id: string;",
      "  createdAt: Date;",
      "  updatedAt: Date;"
    ];
    return `export type ${definition.name} = {
${[
      ...defaultFields,
      ...fields
    ].join("\n")}
};

export type Create${definition.name}Input = {
${fields.map((field) => field.replace(";", "?;")).join("\n")}
};

export type Update${definition.name}Input = Partial<Create${definition.name}Input>;`;
  }
  generateTypes() {
    let content = `// This file is auto-generated. Do not edit it manually.
// Generated by Prisloc Model Generator

`;
    content += `import { Prisloc } from './index';

`;
    for (const [_, definition] of this.models) {
      content += this.generateTypeForModel(definition) + "\n\n";
    }
    content += `export type PrislocClient = {
${Array.from(this.models.keys()).map((modelName) => `  ${modelName.toLowerCase()}: ${modelName}Model;`).join("\n")}
};

`;
    for (const [modelName] of this.models) {
      content += `export interface ${modelName}Model {
  create(data: Create${modelName}Input): Promise<${modelName}>;
  findMany(options?: {
    where?: Partial<${modelName}>;
    orderBy?: { [K in keyof ${modelName}]?: 'asc' | 'desc' };
    skip?: number;
    take?: number;
  }): Promise<${modelName}[]>;
  findUnique(where: Partial<${modelName}>): Promise<${modelName} | null>;
  update(where: Partial<${modelName}>, data: Update${modelName}Input): Promise<${modelName}>;
  delete(where: Partial<${modelName}>): Promise<${modelName}>;
}

`;
    }
    import_fs.default.writeFileSync(this.outputPath, content);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ModelGenerator
});
